#!/bin/bash

set -e  # Interrompe imediatamente se qualquer comando falhar

INFRA_DIR="infra"

# Passo 2: Autentica√ß√£o no Azure
echo "üîê Autenticando na Azure..."
az login

# Passo 3: Exportar vari√°veis para o Terraform (opcional)
echo "üì¶ Exportando vari√°veis de ambiente para Terraform..."

# Passo 4: Inicializar o Terraform
echo "üöÄ Inicializando Terraform..."
cd "$INFRA_DIR" || exit 1

echo "üß™ Executando terraform init..."
terraform init || { echo "‚ùå Erro ao inicializar o Terraform."; exit 1; }

echo "üß† Criando plano de execu√ß√£o do Terraform..."
terraform plan -out=tfplan || { echo "‚ùå Erro ao gerar o plano do Terraform."; exit 1; }

echo "‚öôÔ∏è Aplicando infraestrutura com Terraform..."
terraform apply -auto-approve tfplan || { echo "‚ùå Erro ao aplicar o plano Terraform."; exit 1; }

echo "üì§ Exportando outputs do Terraform..."
terraform output -json > ../terraform_outputs.json || {
  echo "‚ùå Erro ao salvar outputs do Terraform."; exit 1;
}

# Criar .env com outputs
echo "üîß Gerando arquivo .env..."
cat <<EOF > ../.env
DB_NAME="loccar"
DB_USER="postgres"
DB_PASSWORD="postgres"
DB_HOST="host.docker.internal"
DB_PORT=5432
AZURE_CONNECTION_STRING="$(terraform output -raw azure_connection_string)"
AZURE_CONTAINER_NAME="raw"
DATALAKE_NAME="$(terraform output -raw storage_account_name)"
SPN_CLIENT_ID="$(terraform output -raw service_principal_client_id)"
TENANT_ID="$(terraform output -raw service_principal_tenant_id)"
SECRET_SCOPE="$(terraform output -raw databricks_secret_scope)"
SECRET_KEY="$(terraform output -raw databricks_secret)"
EOF

cd ..

# Conectar Airflow
echo "‚öôÔ∏è Aplicando configura√ß√µes no Airflow..."
python ./airflow_settings.py || {
  echo "‚ùå Erro ao aplicar configura√ß√µes no Airflow."; exit 1;
}

# Astronomer
echo "üöÄ Inicializando Astronomer..."
astro dev init || echo "‚ÑπÔ∏è Ambiente Astronomer j√° inicializado."

echo "üê≥ Subindo containers com Astronomer..."
# Iniciar o ambiente local do Astronomer
echo "üîß Iniciando ambiente local com 'astro dev start'..."
astro dev start --wait 30m

# Aguardar o Airflow Webserver responder na porta 8080
echo "‚è≥ Aguardando o Airflow Webserver responder em http://localhost:8080 ..."

# Tempo limite de espera (em segundos)
TIMEOUT=180
SLEEP_INTERVAL=5
ELAPSED=0

while ! curl -s http://localhost:8080 > /dev/null; do
  if [ $ELAPSED -ge $TIMEOUT ]; then
    echo "‚ùå Timeout: O Webserver do Airflow n√£o respondeu ap√≥s $TIMEOUT segundos."
    exit 1
  fi
  echo "‚è±Ô∏è Ainda n√£o dispon√≠vel... aguardando ($ELAPSED s)"
  sleep $SLEEP_INTERVAL
  ELAPSED=$((ELAPSED + SLEEP_INTERVAL))
done

echo "‚úÖ Ambiente pronto! Acesse: http://localhost:8080"

# Fim
echo "‚úÖ Ambiente pronto!"
echo "üåê Acesse o Airflow: http://localhost:8080"
echo "üë§ Usu√°rio: admin | üîë Senha: admin"
echo "‚ö†Ô∏è Configure as conex√µes em Admin > Connections."
echo "üõë Para parar, use: astro dev stop"

PG_CONTAINER=$(docker ps --filter name=postgres --format "{{.Names}}" | head -n 1)

if [ -z "$PG_CONTAINER" ]; then
  echo "‚ùå Nenhum container com 'postgres' no nome encontrado."
  echo "‚ÑπÔ∏è Use 'docker ps' para identificar o nome real do container e atualize o script."
  exit 1
fi

echo "‚úÖ Container PostgreSQL encontrado: $PG_CONTAINER"

# Verifica se o banco existe
DB_EXISTS=$(docker exec -e PGPASSWORD=postgres "$PG_CONTAINER" psql -U postgres -tAc "SELECT 1 FROM pg_database WHERE datname='loccar'")

if [ "$DB_EXISTS" = "1" ]; then
  echo "‚ÑπÔ∏è Banco 'loccar' j√° existe."
else
  echo "üöÄ Criando banco 'loccar'..."
  docker exec -e PGPASSWORD=postgres "$PG_CONTAINER" psql -U postgres -c "CREATE DATABASE loccar;"
  echo "‚úÖ Banco 'loccar' criado com sucesso!"
fi